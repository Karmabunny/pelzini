<?php
/*
Copyright 2008 Josh Heidenreich

This file is part of docu.

Docu is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Docu is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with docu.  If not, see <http://www.gnu.org/licenses/>.
*/


/**
* @package Outputters
* @author Josh
* @since 0.1
**/

/**
* Outputs the tree to a PostgreSQL database
**/
class PostgresqlOutputter extends DatabaseOutputter {
  private $username;
  private $password;
  private $server;
  private $database;
  private $db;
  
  /**
  * Connects to the db
  */
  public function __construct ($username, $password, $server, $database) {
    $this->username = $username;
    $this->password = $password;
    $this->server = $server;
    $this->database = $database;
  }
  
  /**
  * Closes connection to the db
  */
  public function __destruct () {
    if ($this->db) pg_close ($this->db);
  }
  
  
  
  /**
  * Connects to the MySQL database
  **/
  protected function connect () {
    $connect = '';
    if (isset($this->server)) $connect .= "host='{$this->server}' ";
    if (isset($this->username)) $connect .= "user='{$this->username}' ";
    if (isset($this->password)) $connect .= "password='{$this->password}' ";
    if (isset($this->database)) $connect .= "dbname='{$this->database}' ";
    
    $this->db = pg_connect($connect);
    if ($this->db == false) return false;
    return true;
  }
  
  /**
  * Executes a MySQL query
  */
  protected function query ($query) {
    // If the query begins with CREATE or ALTER, make some small changes:
    // - remove 'unsigned', its not supported in postgres.
    // - replace 'mediumtext' with 'text'
    if (strncasecmp('CREATE', $query, 6) == 0 or strncasecmp('ALTER', $query, 5) == 0) {
      $query = str_replace ('unsigned', '', $query);
      $query = str_replace ('mediumtext', 'text', $query);
    }
    
    $return = @pg_query ($query);
    if ($return === false) {
      echo "<p>Error in query:<br><em>{$query}</em><br><br>PostgreSQL reported the following:<br><em>" . pg_last_error() . "</em></p>";
    }
    return $return;
  }
  
  /**
  * Safens some input
  * @param string $input The input to safen
  **/
  protected function sql_safen ($input) {
    if ($input === null) {
      return 'NULL';
    } else if (is_integer ($input)) {
      return $input;
    } else {
      return "'" . pg_escape_string($input) . "'";
    }
  }
  
  /**
  * Fetches a row from the database (numerical)
  **/
  protected function fetch_row ($res) {
    return pg_fetch_row ($res);
  }
  
  /**
  * Fetches a row from the database (assoc)
  **/
  protected function fetch_assoc ($res) {
    return pg_fetch_assoc ($res);
  }
  
  /**
  * Returns the number of rows affected in the last query
  **/
  protected function affected_rows ($res) {
    return pg_affected_rows($res);
  }
  
  /**
  * Returns the autogenerated id created in the last query
  **/
  protected function insert_id () {
    $res = $this->query ('SELECT LASTVAL()');
    $row = $this->fetch_row ($res);
    return $row[0];
  }
  
  
  /**
  * Returns an array of the tables in this database
  **/
  protected function get_table_list () {
    $q = "SELECT c.relname AS name
      FROM pg_catalog.pg_class AS c
      LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace
      WHERE c.relkind IN ('r','')
        AND n.nspname <> 'pg_catalog'
        AND n.nspname !~ '^pg_toast'
        AND pg_catalog.pg_table_is_visible(c.oid)
      ORDER BY 1";
    $res = $this->query ($q);
    
    $tables = array();
    while ($row = $this->fetch_assoc($res)) {
      $tables[] = $row['name'];
    }
    
    print_r ($tables);
    
    return $tables;
  }
  
  /**
  * Should return a multi-dimentional array of the column details
  * Format:
  * Array [
  *   [0] => Array [
  *      'Field' => field name
  *      'Type' => field type, (e.g. 'int unsigned' or 'varchar(255)')
  *      'Null' => nullable?, (e.g. 'NO' or 'YES')
  *      'Key' => indexed?, ('PRI' for primary key)
  *      'Extra' => extra info, (to contain 'auto_increment' if an auto-inc column)
  *      ]
  *    [1] => ...
  *    [n] => ...
  **/
  protected function get_column_details ($table_name) {
    return array();
    // TODO;
  }
}

?>
